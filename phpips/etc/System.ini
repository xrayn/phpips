[BaseConfig]
;
; These are general ConfigOptions which have to be setup correctly
;
;

; Set the absolute path to the php-ips system.

BasePath="/var/www/eclipse-workspaces/eclipse_helios/php-ips/"

; Set the Type of the action Configuration. Currently only "ini" is possible.
ActionConfig.Type="ini"

; If using an ini-file set the path to your config. 
; Path is relative to BasePath. 

ActionConfig.Path="phpips/etc/actions/ActionConfig.ini"


; This is currently not supported, but is a preview of coming features
; ActionConfig.Type= "ini|mysql" 
; If Ini, Options wougl be a path name
; If MySql additional options must be set
; e.g. 
; ActionConfig.DbHost
; ActionConfig.DbName
; ActionConfig.DbUser
; ActionConfig.DbPass
; ActionConfig.DbName
; ... and so on .. 



; Enable or Disable Debugging. For testing purpose, always enable the debugging Module.
; Currently you need the FireFox Addons: FireBug www.getfirebug.com and FirePHP www.firephp.org for that. 
DebbuggingMode="On"

; Enable or disable the simulation Mode.
; If simulation mode is turned on, the System only simulates what it does, and write this in a simulation logfile.
; If its turned off, you are in live mode. For your first tests turn this always on.

SimulationMode="On"
SimulationLogfile="/tmp/simulation.log"

; Define the Tags used by PHPIDS
; Don't touch that.
DefinedTags="sqli,xss,rce,dos,csrf,id,lfi,rfe,dt"


; If you wrote your own Commands, you can turn them on here. If you followed the convention to place your Commands
; underneath the directory phpids/lib/Custom/Module/Modulename you can turn this commands on here
UseCustomCommands="On"
; Set the Module-Directory of the Commands. It need no path, just use the module name

CustomCommandModuleName="Test"

; dont start a session, use this static method instead to generate the session!
ExternalSessionManagementMode="Off"
ExternalSessionManagement.Class="Zend_Auth"
ExternalSessionManagement.Method="getInstance"



;
;
; Here you can define Custom Configurations for Commands
; all these land in the registry of the system an can be accessed
; through getter/setter functions in the registry
; mail.Email = "foo@test.com"
; In your Commands use
; registry->getCommandConfigFrom($commandName="mail",$key="Email")
; @see Registry Documentation
;
; CAUTION DO NOT NEST THIS DEEPER THAN 3 AS SHOWN BELOW. CURRENTLY YOU GET AN OBJECT IF YOU NEST DEEPER
; SO YOU HAVE TO CARE WHEN USING

CommandConfig.mail.Email="root"
CommandConfig.mail.AdminEmail="admin@test.com"
CommandConfig.warn.Email="foo@test.com"





